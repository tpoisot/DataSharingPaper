%!TEX TS-program = pdflatex
\documentclass[12pt]{article}
 
% The declaration of the document class:
\usepackage{amsmath}
\usepackage[english]{babel}
\usepackage{geometry}
\geometry{verbose,letterpaper,margin=2cm}

\usepackage[lf]{MinionPro}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
					 
					 
\setlength{\parindent}{0pt}
\setlength{\parskip}{6pt plus 2pt minus 1pt}
					 
\pagestyle{plain}
\usepackage{setspace}
 
% Table formatting:
% What if you make a table? -- Pandoc knows, of course, and
% then declares that its variable `table` is True and
% imports a table package suitable to its pleasantly simple tables.
% Needless to say infinitely complicated tables are possible in
% LaTeX with suitable packages. We are spared the temptation:
 
$if(tables)$
\usepackage{array}
 
% Continuing on the topic of tables ... (we havent reached `endif`).
% The commented out line below is in the default pandoc latex.template.
% Some unpleasantness with table formatting must be corrected.
 
% -- This is needed because raggedright in table elements redefines \\:
\newcommand{\PreserveBackslash}[1]{\let\temp=\\#1\let\\=\temp}
\let\PBS=\PreserveBackslash
 
$endif$
 
 
% Subscripts:
% Pandoc remembers whether you used subscripts, assigning True to
% its `subscript` variable
% It then needs to adopt a default with an incantation like this:
$if(subscript)$
\newcommand{\textsubscr}[1]{\ensuremath{_{\scriptsize\textrm{#1}}}}
$endif$
 
 
% Web-style links:
 
% markdown inclines us to use links, since our texts can be made into html.
% Why not have clickable blue links even in
% learned, scientific, religious, juridical, poetical and other suchlike texts?
% Never mind that they have been proven to destroy the nervous system!
 
% First, what about the fact that links like http://example.com are
% technically code and thus must not be broken across lines?
% [breaklinks=true] to the rescue!
 
% Nowadays LaTeX can handle all of this with another half million macros:
 
\usepackage[breaklinks=true]{hyperref}
\hypersetup{colorlinks,%
	citecolor=blue,%
		filecolor=blue,%
		linkcolor=blue,%
		urlcolor=blue}
		$if(url)$
		\usepackage{url}
		$endif$
		 
		 
		 
		% Images.
		% In ye olde LaTeX one could only import a limited range of image
		% types, e.g. the forgotten .eps files. Or else one simply drew the image
		% with suitable
		% commands and drawing packages. Today we want to import .jpg files we make
		% with
		% our smart phones or whatever:
		 
		$if(graphics)$
		\usepackage{graphicx}
		% -- We will generate all images so they have a width \maxwidth. This means
		% -- that they will get their normal width if they fit onto the page, but
		% -- are scaled down if they would overflow the margins.
		\makeatletter
		\def\maxwidth{\ifdim\Gin@nat@width>\linewidth\linewidth
			\else\Gin@nat@width\fi}
			\makeatother
			\let\Oldincludegraphics\includegraphics
			\renewcommand{\includegraphics}[1]{\Oldincludegraphics[width=\maxwidth]{#1}}
			$endif$
			 
			 
			 
			% Section numbering.
			% Here again is a variable you can specify on the commandline
			% `markdown2pdf my.txt --number-sections --xetex
			% --template=/wherever/this/is -o my.pdf`
			$if(numbersections)$
			$else$
			\setcounter{secnumdepth}{0}
			$endif$
			 
			% Footnotes:
			% Wait, didn't we already discuss the crisis of code in footnotes?
			% Evidently the order of unfolding of macros required that
			% we import a package to deal with them earlier
			% and issue a command it defines now. (Or maybe that's not the reason;
					% very often the order does matter as the insane system of macro
					% expansion
					% must take place by stages.)
			$if(verbatim-in-note)$
			\VerbatimFootnotes % -- allows verbatim text in footnotes
			$endif$
			 
			% Other stuff you specify on the command line:
			% You can include stuff for the header from a file specified on the
			% command line;
			% I've never done this, but that stuff will go here:
			$for(header-includes)$
			$header-includes$
			$endfor$
			 
			% Title, authors, date.
			% If you specified title authors and date at the start of
			% your pandoc-markdown file, pandoc knows the 'values' of the
			% variables: title authors date and fills them in.
			 
			$if(title)$
			\title{$title$}
			$endif$
			\author{$for(author)$$author$$sep$\\$endfor$}
			$if(date)$
			\date{$date$}
			$endif$
			 
			% At last:
			% The document itself!:
			 
			% After filling in all these blanks above, or erasing them
			% where they are not needed, Pandoc has finished writing the
			% famous LaTeX *preamble* for your document.
			% Now comes the all-important command \begin{document}
			% which as you can see, will be paired with an \end{document} at the end.
			% Pandoc knows whether you have a title, and has already
			% specified what it is; if so, it demands that the title be rendered.
			% Pandoc knows whether you want a table of contents, you
			% specify this on the command line.
			% Then, after fiddling with alignments, there comes the real
			% business: pandoc slaps its rendering of your text in the place of
			% the variable `body`
			% It then concludes the document it has been writing.
			 
			\begin{document}
			 
			 
			$if(title)$
			\maketitle
			$endif$
			 
			$if(toc)$
			\tableofcontents
			 
			$endif$
			 
			 
			$if(alignment)$
			\begin{$alignment$}
			$endif$
			 
			\doublespacing
			$body$
			 
			%$if(alignment)$
			\end{$alignment$}
			$endif$
			 
			 
			\end{document}
